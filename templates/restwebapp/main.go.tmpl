/*
 * Copyright Â© {{.Year}}. {{.CompanyName}} All Rights Reserved
 */

package main

import (
	"context"
	{{- if .WantFrontend}}
	"embed"{{end}}
	"fmt"
	"net/http"
	"os"
	{{- if .WantFrontend}}
	"os/exec"{{end}}
	"os/signal"
	"syscall"
	"time"
	{{if .WantDatabase}}
	"github.com/jackc/pgx/v4"{{end}}
	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
	"github.com/sirupsen/logrus"
	echoSwagger "github.com/swaggo/echo-swagger"
)

/*
 * These constants are used for environment configuration and
 * logging setup.
 */
const (
	APP_NAME   string = "{{.AppName}}"
	ENV_PREFIX string = "{{.EnvPrefix}}"{{if .WantDatabase}}
	
	DEFAULT_DB_HOST            string = "{{.DbHost}}"
	DEFAULT_DB_USER            string = "{{.DbUser}}"
	DEFAULT_DB_PASSWORD        string = "{{.DbPassword}}"
	DEFAULT_DB_NAME            string = "{{.DbName}}"
	MAX_DB_CONNECTION_ATTEMPTS int    = 5{{end}}
)

var (
	Version = "development"

	config Config
	logger *logrus.Entry
	server *echo.Echo{{if .WantDatabase}}
	db     *pgx.Conn{{end}}

	{{- if .WantFrontend}}
	//go:embed app/dist/index.html app/dist/favicon.ico
	//go:embed app/dist/css/*
	//go:embed app/dist/js/*
	//go:embed app/dist/img/*
	appFs embed.FS{{end}}

	// Services

	// Controllers
	versionController VersionController
)

// @title {{.AppName}}
// @version 1.0.0
// @description {{.Description}}
// @contact.name {{.CompanyName}}
// @contact.email {{.Email}}
func main() {
	var (
		err      error
		loglevel logrus.Level
	)

	config = NewConfig(Version)
	logger = logrus.New().WithField("who", APP_NAME)

	if loglevel, err = logrus.ParseLevel(config.ServerLogLevel); err != nil {
		logger.Fatal("invalid log level")
	}

	logger.Logger.SetLevel(loglevel){{if .WantDatabase}}

	/*
	 * Setup database
	 */
	connectionTries := 0
	connectionWaitTime := 5

connectToDB:

	if db, err = pgx.Connect(context.Background(), config.DatabaseURL); err != nil {
		logger.WithError(err).Errorf("unable to connect to database. will attempt again in %ds", connectionWaitTime)

		if connectionTries < MAX_DB_CONNECTION_ATTEMPTS {
			connectionTries++
			time.Sleep(time.Duration(connectionWaitTime) * time.Second)

			connectionWaitTime += 5
			goto connectToDB
		}

		logger.Fatalf("unable to connect to database after %d tries", connectionTries)
	}

	defer db.Close(context.Background()){{end}}

	/*
	 * Setup services
	 */

	/*
	 * Setup controllers
	 */
	versionController = VersionController{Config: config}

	/*
	 * Setup server
	 */
	server = echo.New()
	server.HideBanner = true
	server.Use(middleware.CORS())

	server.GET("/swagger/*", echoSwagger.WrapHandler)
	{{- if .WantFrontend}}
	server.GET("/*", echo.WrapHandler(http.FileServer(getClientAppFileSystem(Version == "development")))){{end}}

	apiV1 := server.Group("/api/v1")

	apiV1.GET("/version", versionController.GetVersion)

	/*
	 * Start the server
	 */
	go func() {
		logger.WithFields(logrus.Fields{
			"host":          config.ServerHost,
			"serverVersion": config.Version,
			"logLevel":      config.ServerLogLevel,
			"cert":          config.ServerCert,
		}).Info("starting server...")

		if config.ServerCert != "" {
			err = server.StartTLS(config.ServerHost, fmt.Sprintf("%s.pem", config.ServerCert), fmt.Sprintf("%s.key", config.ServerCert))
		} else {
			err = server.Start(config.ServerHost)
		}

		if err != http.ErrServerClosed {
			logger.WithError(err).Fatal("unable to start application. shutting down")
		} else {
			logger.Info("shutting down...")
		}
	}()

	{{- if .WantFrontend}}/*
	 * Start the Node client app
	 */
	if Version == "development" {
		go func() {
			logger.Info("Starting Node development server...")

			var cmd *exec.Cmd
			var err error

			if cmd, err = startClientApp(); err != nil {
				logger.WithError(err).Fatal("Error starting Node development!")
			}

			cmd.Wait()
			logger.Info("Stopping Node development server...")
		}()
	}{{end}}

	/*
	 * Wait for a kill signal
	 */
	quit := make(chan os.Signal)
	signal.Notify(quit, os.Interrupt, syscall.SIGQUIT, syscall.SIGTERM)
	<-quit

	ctx, cancel := context.WithTimeout(context.Background(), 10*time.Second)
	defer cancel()

	if err = server.Shutdown(ctx); err != nil {
		logger.WithError(err).Error("error shutting down the server")
	}

	logger.Info("application stopped")
}

