package main

import (
	"flag"
	"fmt"
	{{- if .WantDatabase}}
	"time"{{end}}

	"github.com/sirupsen/logrus"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
)

type Config struct {
	Version string

	ServerHost string
	ServerLogLevel logrus.Level
	ServerCert string
	{{- if .WantDatabase}}

	DatabaseURL string
	DatabaseTimeout time.Duration{{end}}
}

func NewConfig(serverVersion, envPrefix, defaultDBUser, defaultDBPassword, defaultDBHost, defaultDBName string) Config {
	var (
		err error
		loglevel logrus.Level
	)

	result := viper.New()
	result.Set("server.version", serverVersion)

	result.SetDefault("server.host", "localhost:8080")
	result.BindEnv("server.host", fmt.Sprintf("%s_SERVER_HOST", envPrefix))
	flag.String("server.host", "localhost:8080", "Host and port to bind this server to")

	result.SetDefault("server.loglevel", "debug")
	result.BindEnv("server.loglevel", fmt.Sprintf("%s_SERVER_LOGLEVEL", envPrefix))
	flag.String("server.loglevel", "debug", "Minimum level to write log entries for")

	result.SetDefault("server.cert", "")
	result.BindEnv("server.cert", fmt.Sprintf("%s_SERVER_CERT", envPrefix))
	flag.String("server.cert", "", "SSL certificate file name (minus extension)"){{if .WantDatabase}}

	result.SetDefault("database.url", fmt.Sprintf("postgres://%s:%s@%s/%s", defaultDBUser, defaultDBPassword, defaultDBHost, defaultDBName))
	result.BindEnv("database.url", fmt.Sprintf("%s_DATABASE_URL", envPrefix))
	flag.String("database.url", fmt.Sprintf("postgres://%s:%s@%s/%s", defaultDBUser, defaultDBPassword, defaultDBHost, defaultDBName), "URL for connecting to a database")

	result.SetDefault("database.timeout", 10)
	result.BindEnv("database.timeout", fmt.Sprintf("%s_DATABASE_TIMEOUT", envPrefix))
	flag.Int("database.timeout", 10, "Database query timeout in seconds. Default 10 seconds"){{end}}

	pflag.CommandLine.AddGoFlagSet(flag.CommandLine)
	pflag.Parse()
	result.BindPFlags(pflag.CommandLine)

	if loglevel, err = logrus.ParseLevel(result.GetString("server.loglevel")); err != nil {
		panic("Invalid log level")
	}

	config := Config{
		Version: result.GetString("server.version"),
		ServerHost: result.GetString("server.host"),
		ServerLogLevel: loglevel,
		ServerCert: result.GetString("server.cert"),{{- if .WantDatabase}}
		DatabaseURL: result.GetString("database.url"),
		DatabaseTimeout: result.GetDuration("database.timeout"),{{end}}
	}

	return config
}

