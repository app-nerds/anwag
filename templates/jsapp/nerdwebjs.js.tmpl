/* v1.5.2 */
const fetch=window.fetch.bind(window),objectToMap=(e={})=>{let t=new Map;for(const s in e)t.set(s,e[s]);return t};class MessageBox extends HTMLElement{constructor(){super()}connectedCallback(){let e=document.createElement("div");e.classList.add("message-box"),e.innerHTML=this.getAttribute("message");var t=this.getAttribute("type");"success"===t?e.classList.add("success-box"):"information"===t?e.classList.add("information-box"):e.classList.add("error-box"),this.appendChild(e),e.style.animation="fadeIn 0.6s",e.style.display="block",setTimeout(()=>{e.style.animation="fadeOut 0.6s"},parseInt(this.getAttribute("duration")))}}function _displayMessageBox(e,t,s){let o=new MessageBox;o.setAttribute("type",t),o.setAttribute("message",e),o.setAttribute("duration",s),document.body.appendChild(o),setTimeout(()=>{document.body.removeChild(o)},parseInt(s)+300)}function displaySuccessMessage(e,t=3500){_displayMessageBox(e,"success",t)}function displayInformationMessage(e,t=3500){_displayMessageBox(e,"information",t)}function displayErrorMessage(e,t=3500){_displayMessageBox(e,"error",t)}customElements.define("message-box",MessageBox);class BaseView extends HTMLElement{constructor(e){super(),this._title="",this.params=e,this._state={},this.router=window._router,this.displaySuccessMessage=displaySuccessMessage,this.displayErrorMessage=displayErrorMessage,this.displayInformationMessage=displayInformationMessage}async connectedCallback(){await this.beforeRender(),await this.render(),this._setDocumentTitle(),await this.afterRender()}disconnectedCallback(){this.onUnload()}_setDocumentTitle(){var e=this.querySelectorAll("title");e&&0<e.length&&(this._title=e[0].innerText,document.title=this._title,this.removeChild(e[0]))}async beforeRender(){}async afterRender(){}async onUnload(){}async render(){throw new Error("not implemented")}get title(){return this._title}get html(){return this._html}get state(){return this._state}set state(e){this._state=e}getQueryParam(e){return this.router.getQueryParam(e)}navigateTo(e,t={},s={}){this.router.navigateTo(e,t,s)}}class DefaultPageNotFound extends BaseView{constructor(e){super(e)}async render(){return`
			<title>Page Not Found</title>
			<p>The page ${this.params.path} could not be found.</p>
		`}}customElements.define("default-page-not-found",DefaultPageNotFound);class Router{constructor(e,t,s=null){this.targetEl=e,this.routes=t,this.pageNotFoundView=s,this.beforeRoute=null,this.afterRoute=null,this.injectParams=null,this.pageNotFoundView?this.routes.push({path:"/404notfound/:path",view:this.pageNotFoundView}):this.routes.push({path:"/404notfound/:path",view:DefaultPageNotFound})}_pathToRegex(e){return new RegExp("^"+e.replace(/\//g,"\\/").replace(/:\w+/g,"(.+)")+"$")}_getParams(e){let t=0;var s=e.result.slice(1),o=Array.from(e.route.path.matchAll(/:(\w+)/g)).map(e=>e[1]);let a={};for(t=0;t<s.length;t++)a[o[t]]=s[t];if(this.injectParams){var r=this.injectParams(e);for(const n in r)a[n]=r[n]}return a}async _route(e){let t={};e.state&&(t=e.state);const s=this.routes.map(e=>({route:e,result:location.pathname.match(this._pathToRegex(e.path))}));let o=s.find(e=>null!==e.result);if(o){if(!this.beforeRoute||!1!==this.beforeRoute.apply(this,o.route)){e=this._getParams(o);const a=new o.route.view(e);a.state=t;const r=document.querySelector(this.targetEl);r.innerHTML="",r.appendChild(a),this.afterRoute&&this.afterRoute(o.route)}}else this.navigateTo(`/404notfound${location.pathname}`)}getQueryParam(e){let t=new URLSearchParams(location.search);return t.get(e)}navigateTo(e,t={},s={}){let o="";if(0<Object.keys(t).length){var a,r,t=objectToMap(t);o+="?";for([a,r]of t){var n=encodeURIComponent(a);let e=r;"object"==typeof r&&(e=JSON.stringify(r));var i=encodeURIComponent(e);o+=`${n}=${i}&`}}history.pushState(s,null,`${e}${o}`),this._route({state:s})}}const application=(e,t,s=DefaultPageNotFound)=>(window._router=new Router(e,t,s),window.navigateTo=window._router.navigateTo.bind(window._router),window.addEventListener("popstate",e=>{window._router._route({state:e.state})}),{routes:t,targetElement:e,router:window._router,afterRoute:e=>{window._router.afterRoute=e.bind(window._router)},beforeRoute:e=>{window._router.beforeRoute=e.bind(window._router)},injectParams:e=>{window._router.injectParams=e.bind(window._router)},go:()=>{window._router._route({})}});export{BaseView,DefaultPageNotFound,MessageBox,Router,application,displayErrorMessage,displayInformationMessage,displaySuccessMessage,fetch};
