package configuration

import (
	"github.com/app-nerds/configinator"
	"github.com/sirupsen/logrus"
)

type Config struct {
	AppName string
	Version string

  AutoSSLEmail     string `flag:"autosslemail" env:"AUTO_SSL_EMAIL" default:"" description:"Email address to use for Lets Encrypt"`
  AutoSSLWhitelist string `flag:"autosslwhitelist" env:"AUTO_SSL_WHITELIST" default:"" description:"Comma-seperated list of domains for SSL"`
  {{- if .WantDatabase}}
  DSN              string `flag:"dsn" env:"DSN" default:"{{.DSN}}" description:"DSN string to connect to a database"`
  {{- end}}
	LogLevel         string `flag:"loglevel" env:"LOG_LEVEL" default:"info" description:"Minimum log level to report"`
  ServerHost       string `flag:"serverhost" env:"SERVER_HOST" default:"localhost:8080" description:"Host and port to bind to"`
}

func NewConfig(appName, version string) *Config {
	result := Config{}
	configinator.Behold(&result)

	result.AppName = appName
	result.Version = version

	return &result
}

func (c *Config) GetLogLevel() logrus.Level {
	var (
		err      error
		loglevel logrus.Level
	)

	if loglevel, err = logrus.ParseLevel(c.LogLevel); err != nil {
		panic("invalid log level '" + c.LogLevel + "'")
	}

	return loglevel
}

