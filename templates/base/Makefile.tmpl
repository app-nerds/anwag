.DEFAULT_GOAL := help
.PHONY: help

help:
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-30s\033[0m %s\n", $$1, $$2}'

VERSION=$(shell cat ./VERSION)
BUILDFLAGS=-s -w -X 'main.Version=${VERSION}'
PROJECTNAME={{.AppName}}
GOENV=CGO_ENABLED=0 GOPRIVATE="github.com/app-nerds/*" GONOPROXY="github.com/app-nerds/*"
GC=${GOENV} go build -ldflags="${BUILDFLAGS}" -mod=mod -o ${PROJECTNAME}

#
# Local dev tasks
#

setup: ## Perform initial setup of dependencies. Requires Go 1.18{{- if .WantFrontend}} and NodeJS{{end}}
	{{- if .WantFrontend}}
	cd app && npm install && npm run build{{end}}
	cd cmd/{{.AppName}} && go mod download
	cd cmd/{{.AppName}} && go get

bench: ## Run all benchmark tests
	go test ./... -bench=.

coverage: ## Run all unit tests and display a coverage report
	go test ./... -coverageprofile=coverageprofile.out

test: ## Run all unit tests
	go test ./...

run: ## Run the application for local development
	cd cmd/{{.AppName}} && go run .

#
# Build tasks
#

build-windows:{{- if.WantFrontend}} build-client-app{{end}} ## Create a compiled Windows binary
	cd cmd/{{.AppName}} && GOOS=windows GOARCH=amd64 ${GC}-windows-${VERSION}.exe

build-mac:{{- if.WantFrontend}} build-client-app{{end}} ## Create a compiled MacOS binary (arm64)
	cd cmd/{{.AppName}} && GOOS=darwin GOARCH=arm64 ${GC}-darwin-arm64-${VERSION}

build-mac-amd:{{- if.WantFrontend}} build-client-app{{end}} ## Create a compiled MacOS binary (amd64)
	cd cmd/{{.AppName}} && GOOS=darwin GOARCH=amd64 ${GC}-darwin-${VERSION}

build-linux:{{- if.WantFrontend}} build-client-app{{end}} ## Create a compiled Linux binary (amd64)
	cd cmd/{{.AppName}} && GOOS=linux GOARCH=amd64 ${GC}-linux-${VERSION}

build-all:{{- if.WantFrontend}} build-client-app{{end}} ## Build all architectures
	cd cmd/{{.AppName}} && GOOS=windows GOARCH=amd64 ${GC}-windows-${VERSION}.exe
	cd cmd/{{.AppName}} && GOOS=darwin GOARCH=arm64 ${GC}-darwin-arm64-${VERSION}
	cd cmd/{{.AppName}} && GOOS=darwin GOARCH=amd64 ${GC}-darwin-${VERSION}
	cd cmd/{{.AppName}} && GOOS=linux GOARCH=amd64 ${GC}-linux-${VERSION}

{{- if .WantFrontend}}

build-client-app: 
	cd app && npm run build
{{end}}

package: ## Package executables into a ZIP file
	cd cmd/{{.AppName}} && zip  ./{{.AppName}}-linux-amd64-${VERSION}.zip ./*linux*
	cd cmd/{{.AppName}} && zip  ./{{.AppName}}-darwin-${VERSION}.zip ./*darwin*
	cd cmd/{{.AppName}} && zip ./{{.AppName}}-windows-amd64-${VERSION}.zip ./*windows*

#
# Docker tasks
#

{{- if .WantDatabase}}
start-database: ## Starts the database server
{{- if eq .WhatTypeOfDatabase "MongoDB"}}
	docker compose up mongodb{{end}}
{{- if eq .WhatTypeOfDatabase "MySQL"}}
	docker compose up mysql{{end}}
{{- if eq .WhatTypeOfDatabase "Postgres"}}
	docker compose up postgres{{end}}
{{- end}}

run-docker: ## Starts all containers in Docker
	docker compose up --build

